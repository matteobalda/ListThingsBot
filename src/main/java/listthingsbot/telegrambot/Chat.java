package listthingsbot.telegrambot;

import listthingsbot.listmodel.User;
import listthingsbot.telegrambot.actions.Action;
import listthingsbot.telegrambot.buttons.Markup;
import org.telegram.telegrambots.meta.api.methods.groupadministration.GetChatMember;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.chatmember.ChatMember;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.io.Serializable;

/**
 * This class controls the interaction between the Telegram user and the bot.
 * It sends all the messages and manages the conversation.
 *
 * @author Matteo Ciaroni
 */
public class Chat implements Serializable
{
	/**
	 * The Telegram Bot object is used to execute actions like send and edit messages
	 */
	protected static TelegramListBot bot;
	/**
	 * The object which contains the chat id and all the lists
	 */
	public final User listUser;
	/**
	 * Describes the current chat status.
	 * It's used to manage the conversation and record previous actions.
	 */
	public ChatStatus status;

	/**
	 * Describes the last selected list title.
	 * As "status", it's used to manage the conversation and record previous actions.
	 */
	public String lastListTitle;

	public Chat(String chatId)
	{
		listUser = new User(chatId);
		status = ChatStatus.DEFAULT;
	}

	/**
	 * This method is called from the TelegramBot object every time an update from Telegram is generated
	 *
	 * @param update is the update generated by Telegram
	 */
	public void onUpdate(Update update)
	{
		if(update.hasMessage())
			Action.elaborate(this, update.getMessage());
		else if(update.hasCallbackQuery())
			Action.elaborate(this, update.getCallbackQuery());
	}

	/**
	 * Check if user is admin in the current chat
	 *
	 * @param userId the ID of the user
	 */
	public boolean isUserAdmin(long userId)
	{
		GetChatMember g = new GetChatMember();
		g.setChatId(this.listUser.getId());
		g.setUserId(userId);

		try
		{
			ChatMember c = bot.execute(g);
			return (c.getStatus().equals("creator") || c.getStatus().equals("administrator"));
		}
		catch(TelegramApiException e)
		{
			e.printStackTrace();
		}
		return false;
	}

	/**
	 * This method creates a new list and send a confirmation message
	 *
	 * @param listTitle the title of the new list
	 */
	public void addList(String listTitle)
	{
		if(listUser.getList(listTitle) == null)
		{
			listUser.newList(listTitle);
			sendMessage("✅ New list <b>" + listTitle + "</b> created", Markup.listOptions(listTitle, listUser.getList(listTitle).size()>0));
		}
		else
			sendMessage("⚠️ List " + listTitle + " <b>already exists</b>");
	}

	/**
	 * This method renames a list and send a confirmation message
	 *
	 * @param oldTitle the old title of the list
	 * @param newTitle the new title of the list
	 */
	public void renameList(String oldTitle, String newTitle)
	{
		status = ChatStatus.DEFAULT;

		if(listUser.getList(oldTitle) != null)
		{
			listUser.renameList(oldTitle, newTitle);
			sendMessage("List <b>" + oldTitle + "</b> renamed to <b>" + newTitle + "</b>", Markup.showLists(newTitle));
		}
		else
			sendMessage("⚠️ List " + oldTitle + " <b>not found</b> \uD83D\uDE41");
	}

	/**
	 * This method add items to a list and send a confirmation message.
	 * User can add multiple items writing one for each row of the message.
	 *
	 * @param listTitle the title list
	 * @param items     all the items to add to the list
	 */
	public void addItems(String listTitle, String items)
	{
		status = ChatStatus.DEFAULT;

		if(listUser.getList(listTitle) != null)
		{
			for(String item : items.split("\n"))
				listUser.getList(listTitle).addItem(item.trim());

			sendMessage("Item added to <b>" + listTitle + "</b> ✅", Markup.addItemsOrShow(listTitle));
		}
		else
			sendMessage("⚠️ List " + listTitle + " <b>not found</b> \uD83D\uDE41");
	}

	/**
	 * This method removes an item from a list and send a confirmation message
	 *
	 * @param listTitle the list title
	 * @param item      the position of the item to remove (start from 1)
	 */
	public void removeItem(String listTitle, int item)
	{
		try
		{
			listUser.getList(listTitle).removeItem(item);
			sendMessage("Item removed from <b>" + listTitle + "</b>", Markup.showList(listTitle));
		}
		catch(NullPointerException e)
		{
			sendMessage("⚠️ List " + listTitle + " <b>not found</b> \uD83D\uDE41");
		}
	}

	/**
	 * This method sends a message using the Telegram bot object
	 *
	 * @param message the message to send
	 */
	public void sendMessage(SendMessage message)
	{
		message.enableHtml(true);
		message.setChatId(listUser.getId());

		try
		{
			bot.execute(message);
		}
		catch(TelegramApiException e)
		{
			e.printStackTrace();
		}
	}

	/**
	 * This method is a short way to send a simple text message.
	 *
	 * @param text the string to send as a message
	 */
	public void sendMessage(String text)
	{
		SendMessage message = new SendMessage();
		message.setText(text);
		sendMessage(message);
	}

	/**
	 * This method is a short way to send a simple text message.
	 *
	 * @param text the string to send as a message
	 * @param markup the markup containing buttons
	 */
	public void sendMessage(String text, InlineKeyboardMarkup markup)
	{
		SendMessage message = new SendMessage();
		message.setReplyMarkup(markup);
		message.setText(text);
		sendMessage(message);
	}

	/**
	 * This method edits a message using the Telegram bot object
	 *
	 * @param message the message to edit
	 */
	public void editMessage(EditMessageText message)
	{
		message.enableHtml(true);
		message.setChatId(listUser.getId());

		try
		{
			bot.execute(message);
		}
		catch(TelegramApiException e)
		{
			e.printStackTrace();
		}
	}
}
