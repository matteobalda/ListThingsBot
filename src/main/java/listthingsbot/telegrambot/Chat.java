package listthingsbot.telegrambot;

import listthingsbot.listmodel.User;
import org.telegram.telegrambots.meta.api.methods.groupadministration.GetChatMember;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.chatmember.ChatMember;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.ArrayList;
import java.util.List;

/**
 * This class controls the interaction between the Telegram user and the bot.
 * It sends all the messages and manages the conversation.
 *
 * @author Matteo Ciaroni
 */
public class Chat
{
    /**
     * The object which contains the chat id and all the lists
     */
    private final User listUser;

    /**
     * The Telegram Bot object is used to execute actions like send and edit messages
     */
    private final TelegramListBot bot;

    /**
     * Describes the current chat status.
     * It's used to manage the conversation and record previous actions.
     */
    private ChatStatus status;

    /**
     * Describes the last selected list title.
     * As "status", it's used to manage the conversation and record previous actions.
     */
    private String lastListTitle;

    public Chat(String chatId, TelegramListBot bot)
    {
        listUser=new User(chatId);
        this.bot=bot;
        status=ChatStatus.DEFAULT;
    }

    /**
     * This method is called from the TelegramBot object every time an update from Telegram is generated
     *
     * @param update is the update generated by Telegram
     */
    public void onUpdate(Update update)
    {
        if(update.hasMessage())
            elaborate(update.getMessage());
        else if(update.hasCallbackQuery())
            elaborate(update.getCallbackQuery());
    }

    /**
     * @return the inline buttons containing all the list titles
     */
    private InlineKeyboardMarkup getButtonsWithListTitles(String action)
    {
        InlineKeyboardMarkup markupInline=new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rowsInline=new ArrayList<>();

        for(String list : listUser.getLists().split("\n"))
        {
            List<InlineKeyboardButton> rowInline=new ArrayList<>();
            InlineKeyboardButton inlineKeyboardButton=new InlineKeyboardButton();
            inlineKeyboardButton.setText(list);
            inlineKeyboardButton.setCallbackData(action+list);
            rowInline.add(inlineKeyboardButton);
            rowsInline.add(rowInline);
        }
        markupInline.setKeyboard(rowsInline);

        return markupInline;
    }

    /**
     * @return the inline buttons containing all the list options ("add item", "remove item", "delete", "rename" and "all lists")
     */
    public InlineKeyboardMarkup getButtonsWithListOptions(String listTitle)
    {
        InlineKeyboardMarkup markupInline=new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rowsInline=new ArrayList<>();
        List<InlineKeyboardButton> line1=new ArrayList<>();
        List<InlineKeyboardButton> line2=new ArrayList<>();
        List<InlineKeyboardButton> line3=new ArrayList<>();
        InlineKeyboardButton addItems=new InlineKeyboardButton();
        addItems.setText("➕ Add items");
        addItems.setCallbackData("additems_"+listTitle);
        InlineKeyboardButton removeItem=new InlineKeyboardButton();
        removeItem.setText("➖ Remove item");
        removeItem.setCallbackData("removeitem_"+listTitle);
        InlineKeyboardButton deleteList=new InlineKeyboardButton();
        deleteList.setText("\uD83D\uDDD1 Delete list");
        deleteList.setCallbackData("delete_"+listTitle);
        InlineKeyboardButton renameList=new InlineKeyboardButton();
        renameList.setText("✏️ Rename list");
        renameList.setCallbackData("rename_"+listTitle);
        InlineKeyboardButton allLists=new InlineKeyboardButton();
        allLists.setText("\uD83D\uDD19 All lists");
        allLists.setCallbackData("lists");
        line1.add(addItems);

        if(listUser.getList(listTitle).size()>0)
            line1.add(removeItem);

        line2.add(renameList);
        line2.add(deleteList);
        line3.add(allLists);
        rowsInline.add(line1);
        rowsInline.add(line2);
        rowsInline.add(line3);
        markupInline.setKeyboard(rowsInline);

        return markupInline;
    }

    /**
     * This method is called when the update received from Telegram has a message.
     * It can send and edit messages.
     *
     * @param message the message which generated the update event
     */
    public void elaborate(Message message)
    {
        /* When the user sends the "lists" command */
        if(message.isCommand() && message.getText().startsWith("/lists"))
        {
            if(listUser.countLists()>0)
            {
                SendMessage sendMessage=new SendMessage();
                sendMessage.setReplyMarkup(getButtonsWithListTitles("show_"));
                sendMessage.setText("Select a list to show");
                sendMessage(sendMessage);
            }
            else
                sendMessage("Nothing to show \uD83D\uDE41\nCreate a new list with /newlist");
        }

        /* Check if user is admin in a group or if it's a private chat */
        else if(!message.isGroupMessage() || isUserAdmin(message.getFrom().getId()))
        {
            /* Messages containing TELEGRAM COMMANDS */
            if(message.isCommand())
            {
                /* When the user sends the "new list" command */
                if(message.getText().startsWith("/newlist"))
                {
                    status=ChatStatus.ADD_LIST;
                    sendMessage("Type the <b>name</b> of the new list");
                }
                /* When the user sends the "cancel" command */
                else if(message.getText().startsWith("/cancel"))
                {
                    status=ChatStatus.DEFAULT;
                    sendMessage("Previous actions ignored");
                }
                /* When the user sends the "help" command */
                else if(message.getText().startsWith("/help"))
                {
                    status=ChatStatus.DEFAULT;
                    StringBuilder helpMessage=new StringBuilder();
                    helpMessage.append("This bot can help you manage multiple lists of things.\n");
                    helpMessage.append("Use the /lists command to show all lists and to manage them.\n");
                    helpMessage.append("Use the /newlist command to create a new list.\n");
                    helpMessage.append("Use the /cancel command to ignore previous actions.\n");
                    helpMessage.append("Use the /help command to show this message.\n");
                    sendMessage(helpMessage.toString());
                }
            }

            /* Messages with no Telegram commands: instructions are based on the chat status */

            /* When the user sends a message with the title of a new list */
            else if(status==ChatStatus.ADD_LIST)
            {
                addList(message.getText().trim());
                status=ChatStatus.DEFAULT;
            }

            /* When the user sends a message with the new title of a list to rename */
            else if(status==ChatStatus.RENAME_LIST)
            {
                renameList(lastListTitle, message.getText().trim());
                status=ChatStatus.DEFAULT;
            }

            /* When the user sends a message with a new item to add to a list */
            else if(status==ChatStatus.ADD_ITEM)
            {
                addItems(lastListTitle, message.getText().trim().split("\n"));
                status=ChatStatus.DEFAULT;
            }

            /* When the user sends a message with a new item to remove from a list */
            else if(status==ChatStatus.DELETE_ITEM)
            {
                try
                {
                    removeItem(lastListTitle, Integer.parseInt(message.getText()));
                }
                catch(NumberFormatException e)
                {
                    SendMessage sendMessage=new SendMessage();
                    sendMessage.setText("⚠️ Not a valid number");
                    sendMessage(sendMessage);
                }
                status=ChatStatus.DEFAULT;
            }
        }
    }


    /**
     * This method is called when the update received from Telegram has a callback query.
     * This method can send and edit messages.
     *
     * @param callbackQuery the callback query which generated the update event
     */
    public void elaborate(CallbackQuery callbackQuery)
    {
        /* When a user select a list to show */
        if(callbackQuery.getData().startsWith("show_"))
        {
            EditMessageText message=new EditMessageText();
            message.setMessageId(callbackQuery.getMessage().getMessageId());
            String listTitle=callbackQuery.getData().replace("show_", "");
            message.setText("\uD83D\uDDD2  <b>"+listTitle+"</b>\n\n"+listUser.getList(listTitle).toString());
            message.setReplyMarkup(getButtonsWithListOptions(listTitle));
            editMessage(message);
        }

        /* When user pressed "all lists" button */
        if(callbackQuery.getData().equals("lists"))
        {
            EditMessageText message=new EditMessageText();
            message.setMessageId(callbackQuery.getMessage().getMessageId());
            message.setText("Select the list to show ⬇️");
            message.setReplyMarkup(getButtonsWithListTitles("show_"));
            editMessage(message);
        }

        /* Check if user is admin in a group or if it's a private chat */
        if(!callbackQuery.getMessage().isGroupMessage() || isUserAdmin(callbackQuery.getFrom().getId()))
        {
            /* When user pressed "delete" button */
            if(callbackQuery.getData().startsWith("delete_"))
            {
                lastListTitle=callbackQuery.getData().replaceFirst("delete_", "");

                if(listUser.getList(lastListTitle)!=null)
                {
                    listUser.removeList(lastListTitle);
                    EditMessageText message=new EditMessageText();
                    message.setMessageId(callbackQuery.getMessage().getMessageId());
                    message.setText("\uD83D\uDDD1️ List <b>"+lastListTitle+"</b> deleted");
                    editMessage(message);
                }
            }

            /* When user pressed "rename" button */
            if(callbackQuery.getData().startsWith("rename_"))
            {
                lastListTitle=callbackQuery.getData().replaceFirst("rename_", "");

                if(listUser.getList(lastListTitle)!=null)
                {
                    status=ChatStatus.RENAME_LIST;
                    sendMessage("✏️ Enter a new name for <b>"+lastListTitle+"</b>");
                }
            }

            /* When user presses "Add item" button */
            if(callbackQuery.getData().startsWith("additems_"))
            {
                lastListTitle=callbackQuery.getData().replaceFirst("additems_", "");

                if(listUser.getList(lastListTitle)!=null)
                {
                    status=ChatStatus.ADD_ITEM;
                    sendMessage("Type the items you want to add to <b>"+lastListTitle+"</b>");
                }
            }

            /* When user presses "Remove item" button */
            if(callbackQuery.getData().startsWith("removeitem_"))
            {
                lastListTitle=callbackQuery.getData().replaceFirst("removeitem_", "");

                if(listUser.getList(lastListTitle)!=null)
                {
                    status=ChatStatus.DELETE_ITEM;
                    sendMessage("Type the item you want to remove from <b>"+lastListTitle+"</b>");
                }
            }
        }
    }

    /**
     * Check if user is admin in the current chat
     * @param userId the ID of the user
     */
    public boolean isUserAdmin(long userId)
    {
        GetChatMember g=new GetChatMember();
        g.setChatId(this.listUser.getId());
        g.setUserId(userId);

        try
        {
            ChatMember c=(bot.execute(g));

            if(c.getStatus().equals("creator") || c.getStatus().equals("administrator"))
                return true;
        }
        catch(TelegramApiException e)
        {
            e.printStackTrace();
        }
        return false;
    }

    /**
     * This method creates a new list and send a confirmation message
     *
     * @param listTitle the title of the new list
     */
    public void addList(String listTitle)
    {
        SendMessage sendMessage=new SendMessage();

        if(listUser.getList(listTitle)==null)
        {
            listUser.newList(listTitle);
            sendMessage.setText("✅ New list <b>"+listTitle+"</b> created");
            sendMessage.setReplyMarkup(getButtonsWithListOptions(listTitle));
        }
        else
            sendMessage.setText("⚠️ List "+listTitle+" <b>already exists</b>");

        sendMessage(sendMessage);
    }

    /**
     * This method renames a list and send a confirmation message
     *
     * @param oldTitle the old title of the list
     * @param newTitle the new title of the list
     */
    public void renameList(String oldTitle, String newTitle)
    {
        status=ChatStatus.DEFAULT;
        SendMessage sendMessage=new SendMessage();

        if(listUser.getList(oldTitle)!=null)
        {
            listUser.renameList(oldTitle, newTitle);
            sendMessage.setText("List <b>"+oldTitle+"</b> renamed to <b>"+newTitle+"</b>");
        }
        else
            sendMessage.setText("⚠️ List "+oldTitle+" <b>not found</b> \uD83D\uDE41");

        sendMessage(sendMessage);
    }

    /**
     * This method add items to a list and send a confirmation message.
     * User can add multiple items writing one for each row of the message.
     *
     * @param listTitle the title list
     * @param items     all the items to add to the list
     */
    public void addItems(String listTitle, String[] items)
    {
        status=ChatStatus.DEFAULT;
        SendMessage sendMessage=new SendMessage();

        if(listUser.getList(listTitle)!=null)
        {
            for(String item : items)
                listUser.getList(listTitle).addItem(item.trim());

            sendMessage.setText("Item added to <b>"+listTitle+"</b> ✅");

            /* Button to add another item */
            InlineKeyboardMarkup markupInline=new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> rowsInline=new ArrayList<>();
            List<InlineKeyboardButton> line1=new ArrayList<>();
            InlineKeyboardButton addItems=new InlineKeyboardButton();
            addItems.setText("➕ Add more items");
            addItems.setCallbackData("additems_"+listTitle);
            line1.add(addItems);
            rowsInline.add(line1);
            markupInline.setKeyboard(rowsInline);
            sendMessage.setReplyMarkup(markupInline);
        }
        else
            sendMessage.setText("⚠️ List "+listTitle+" <b>not found</b> \uD83D\uDE41");

        sendMessage(sendMessage);
    }

    /**
     * This method removes an item from a list and send a confirmation message
     *
     * @param listTitle the list title
     * @param item      the position of the item to remove (start from 1)
     */
    public void removeItem(String listTitle, int item)
    {
        SendMessage sendMessage=new SendMessage();
        try
        {
            listUser.getList(listTitle).removeItem(item);
            sendMessage.setText("Item removed from <b>"+listTitle+"</b>");
        }
        catch(NullPointerException e)
        {
            sendMessage.setText("⚠️ List "+listTitle+" <b>not found</b> \uD83D\uDE41");
        }
        sendMessage(sendMessage);
    }

    /**
     * This method sends a message using the Telegram bot object
     *
     * @param message the message to send
     */
    public void sendMessage(SendMessage message)
    {
        message.enableHtml(true);
        message.setChatId(listUser.getId());

        try
        {
            bot.execute(message);
        }
        catch(TelegramApiException e)
        {
            e.printStackTrace();
        }
    }

    /**
     * This method is a short way to send a simple text message.
     *
     * @param text the string to send as a message
     */
    public void sendMessage(String text)
    {
        SendMessage message=new SendMessage();
        message.setText(text);
        sendMessage(message);
    }

    /**
     * This method edits a message using the Telegram bot object
     *
     * @param message the message to edit
     */
    public void editMessage(EditMessageText message)
    {
        message.enableHtml(true);
        message.setChatId(listUser.getId());

        try
        {
            bot.execute(message);
        }
        catch(TelegramApiException e)
        {
            e.printStackTrace();
        }
    }
}
